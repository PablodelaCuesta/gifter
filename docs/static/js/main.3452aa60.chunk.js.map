{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","Gifter.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGif","Gifter","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAK1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAsBA,OACI,sBAAMC,SAhBW,SAACC,GAElBA,EAAEC,iBAMEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAzBc,SAAEP,GAExBF,EAAcE,EAAEQ,OAAOF,a,uBCVlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAIII,MAAOF,GAJX,cAIbG,EAJa,gBAKIA,EAASC,OALb,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAgBZM,GAhBY,4CAAH,sDCAPO,EAAc,SAAC,GAAgC,IAAD,IAA7BL,IAAUE,GAAmB,EAAvBD,GAAuB,EAAnBC,OAAOV,EAAY,EAAZA,IAE3C,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAKN,IACtB,4BAAIA,QCJHO,EAAU,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,SAErB,ECDuB,SAAEA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAfAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHC,YAAW,WACPJ,EAAS,CACTf,KAAMkB,EACNL,SAAS,MAEV,UAGZ,CAAEpB,IAEEqB,EDrBkBM,CAAa3B,GAA9BO,EAAR,EAAQA,KAAMa,EAAd,EAAcA,QAGd,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAECoB,GAAW,qBAAKJ,UAAU,WAE3B,qBAAKA,UAAU,YAAf,SAEQT,EAAKE,KAAK,SAACC,GAAD,OACN,cAAC,EAAD,CAEIA,IAAMA,GADAA,EAAIC,aEdzBiB,EAAS,WAIlB,MAAoC1C,mBAAS,IAA7C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAWA,OACE,qCACE,wCACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQ4C,EAAWpB,KAAK,SAACT,GAAD,OACZ,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCzB7B8B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3452aa60.chunk.js","sourcesContent":["import { useState } from \"react\"\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    /**\r\n     * El estado tiene que contener algun valor para saber a futuro de que tipo de dato estamos manipulando\r\n     */\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = ( e ) => {\r\n\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault()\r\n\r\n        /**\r\n         * Una propiedad de set(useState) es que nos permite acceder a las categorias\r\n         */\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            // Validacion\r\n            setCategories( cats => [inputValue, ...cats ])\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=YsZ8fHa2GZYh3sph5vIwyGuLMw47MZwy`\r\n\r\n    const response = await fetch( url )\r\n    const { data } = await response.json()\r\n\r\n    const gifs = data.map( img => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {img:{ id, title, url }} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import { useFetchGif } from \"../hooks/useFetchGifs\"\r\nimport { GifGridItem } from \"./GifGridItem\"\r\n\r\nexport const GifGrid = ({category }) => {\r\n\r\n    const { data, loading} = useFetchGif( category )\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n            {loading && <div className=\"loader\"></div>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    data.map( (img) => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            img={ img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\n\r\nexport const useFetchGif = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n    \r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setTimeout(() => {\r\n                    setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n                }, 3000);\r\n            })\r\n\r\n    }, [ category ])\r\n\r\n    return state\r\n\r\n}","import { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const Gifter = () => {\r\n\r\n    // Estructura de datos Inmutable\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\r\n    const [categories, setCategories] = useState([])\r\n\r\n    // const handleAdd = () => {\r\n    //     /**\r\n    //      * Lo mas interesante de este ejercicio es darse cuenta como se trabaja en React. En React trabajamos con estructuras de datos imnutables, por lo que deberemos de utilizar funciones que trabajan con estructuras inmutables. Para resolver este ejercicio se ha utilizado el operador Spread ... que nos permite obtener el array de categorias y agregarle el nuevo elemento al final o al principio.\r\n    //      */\r\n    //     // categories.push('Spiderman')\r\n    //     setCategories( [...categories, 'Spiderman'] )\r\n\r\n    // }\r\n\r\n    return (\r\n      <>\r\n        <h2>Gifter</h2>\r\n        <AddCategory setCategories={ setCategories }/>\r\n        <hr/>\r\n\r\n\r\n        <ol>\r\n            {\r\n                categories.map( (category) =>  (\r\n                    <GifGrid \r\n                        key={category}\r\n                        category={category} \r\n                    />\r\n                ))\r\n            }\r\n        </ol>\r\n      </>\r\n    )\r\n  \r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Gifter } from './Gifter'\n\nReactDOM.render(\n    <Gifter />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}